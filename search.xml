<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python第一天</title>
      <link href="/2024/07/23/python1.html"/>
      <url>/2024/07/23/python1.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python-简介"><a href="#Python-简介" class="headerlink" title="Python 简介"></a>Python 简介</h1><p>Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。</p><p>Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。</p><ul><li><p>Python 是一种解释型语言： 这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言。</p></li><li><p>Python 是交互式语言： 这意味着，您可以在一个 Python 提示符 &gt;&gt;&gt; 后直接执行代码。</p></li><li><p>Python 是面向对象语言: 这意味着Python支持面向对象的风格或代码封装在对象的编程技术。</p></li><li><p>Python 是初学者的语言：Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏。</p></li></ul><h2 id="Python-发展历史"><a href="#Python-发展历史" class="headerlink" title="Python 发展历史"></a>Python 发展历史</h2><p>Python 是由 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。</p><p>Python 本身也是由诸多其他语言发展而来的,这包括 ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。</p><p>像 Perl 语言一样，Python 源代码同样遵循 GPL(GNU General Public License)协议。</p><p>现在 Python 是由一个核心开发团队在维护，Guido van Rossum 仍然占据着至关重要的作用，指导其进展。</p><p>Python 2.7 被确定为最后一个 Python 2.x 版本，它除了支持 Python 2.x 语法外，还支持部分 Python 3.1 语法。</p><h2 id="Python-特点"><a href="#Python-特点" class="headerlink" title="Python 特点"></a>Python 特点</h2><ol><li><p>易于学习：Python 有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。</p></li><li><p>易于阅读：Python 代码定义的更清晰。</p></li><li><p>易于维护：Python的 成功在于它的源代码是相当容易维护的。</p></li><li><p>一个广泛的标准库：Python 的最大的优势之一是丰富的库，跨平台的，在 UNIX、Windows 和 Mac 兼容很好。</p></li><li><p>互动模式：互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片段。</p></li><li><p>可移植：基于其开放源代码的特性，Python 已经被移植（也就是使其工作）到许多平台。</p></li><li><p>可扩展：如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用 C 或 C++ 完成那部分程序，然后从你的 Python 程序中调用。</p></li><li><p>数据库：Python 提供所有主要的商业数据库的接口。</p></li><li><p>GUI 编程：Python 支持 GUI 可以创建和移植到许多系统调用。</p></li><li><p>可嵌入: 你可以将 Python 嵌入到 C&#x2F;C++ 程序，让你的程序的用户获得”脚本化”的能力。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作系统第一天</title>
      <link href="/2024/07/23/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%80%E5%A4%A9.html"/>
      <url>/2024/07/23/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%80%E5%A4%A9.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-简介"><a href="#Linux-简介" class="headerlink" title="Linux 简介"></a>Linux 简介</h1><p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p><p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p><p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><h2 id="Linux-的发行版"><a href="#Linux-的发行版" class="headerlink" title="Linux 的发行版"></a>Linux 的发行版</h2><p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。<br><img src="https://telegraph-image-9kq.pages.dev/file/b9be3c7b923de1c06a583.jpg"><br>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。<br><img src="https://telegraph-image-9kq.pages.dev/file/d0c7d237dae3fa3bd7fd6.jpg"></p><h2 id="Linux-应用领域"><a href="#Linux-应用领域" class="headerlink" title="Linux 应用领域"></a>Linux 应用领域</h2><p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。</p><p>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。</p><ul><li>巴西联邦政府由于支持 Linux 而世界闻名。</li><li>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。</li><li>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。</li><li>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</li><li>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如  Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</li><li>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。</li><li>法国和德国同样开始逐步采用 Linux。</li></ul><h2 id="Linux-vs-Windows"><a href="#Linux-vs-Windows" class="headerlink" title="Linux vs Windows"></a>Linux vs Windows</h2><p>目前国内 Linux 更多的是应用于服务器上，而桌面操作系统更多使用的是 Windows。主要区别如下<br><img src="https://telegraph-image-9kq.pages.dev/file/da7d2c6863c8c01415ebe.png"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作系统第一天</title>
      <link href="/2024/07/23/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E5%A4%A9.html"/>
      <url>/2024/07/23/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E5%A4%A9.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础第四天</title>
      <link href="/2024/07/22/JavaScript4.html"/>
      <url>/2024/07/22/JavaScript4.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript数据类型"><a href="#JavaScript数据类型" class="headerlink" title="JavaScript数据类型"></a>JavaScript数据类型</h1><p>JS 数据类型整体分为两大类：<br>1.基本数据类型<br>2.引用数据类型</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>number 数字型<br>string 字符串型<br>boolean 布尔型<br>undefined 未定义型<br>null 空类型</p><h3 id="数据类型-–-数字类型（Number）"><a href="#数据类型-–-数字类型（Number）" class="headerlink" title="数据类型 – 数字类型（Number）"></a>数据类型 – 数字类型（Number）</h3><p>JavaScript 中的正数、 负数、 小数等 统一称为 数字类型。</p><h4 id="书写格式"><a href="#书写格式" class="headerlink" title="书写格式"></a>书写格式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// js 弱数据类型的语言 只有当我们赋值了，才知道是什么数据类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// let num = 10.11</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// let sum = 12</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(num)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="操作运算"><a href="#操作运算" class="headerlink" title="操作运算"></a>操作运算</h4><p>数字可以有很多操作， 比如， 乘法 * 、 除法 &#x2F; 、 加法 + 、 减法 - 等等， 所以经常和算术运算符一起。<br>数学运算符也叫算术运算符， 主要包括加、 减、 乘、 除、 取余（ 求模） 。<br>+： 求和     -： 求差     *： 求积     &#x2F;： 求商     %： 取模（ 取余数）<br>运算优先级：先乘除后加减，有括号先算括号里面的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> * <span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> / <span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span> % <span class="number">2</span>) <span class="comment">// 求余数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> % <span class="number">3</span>) <span class="comment">// 求余数  2 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> % <span class="number">5</span>) <span class="comment">// 求余数  3 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="NAN"><a href="#NAN" class="headerlink" title="NAN"></a>NAN</h4><p>NaN 代表一个计算错误。 它是一个不正确的或者一个未定义的数学操作所得到的结果<br>NaN 是粘性的。 任何对 NaN 的操作都会返回 NaN</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> + <span class="number">2</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> / <span class="number">2</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="数据类型-–-字符串类型（string）"><a href="#数据类型-–-字符串类型（string）" class="headerlink" title="数据类型 – 字符串类型（string）"></a>数据类型 – 字符串类型（string）</h3><p>通过单引号（ ‘’） 、 双引号（ “”） 或反引号( &#96; ) 包裹的数据都叫字符串， 单引号和双引号没有本质上的区别， 推<br>荐使用单引号。</p><h4 id="书写方式"><a href="#书写方式" class="headerlink" title="书写方式"></a>书写方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> str = <span class="string">&#x27;pink&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> str1 = <span class="string">&quot;pink&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> str2 = <span class="string">`中文`</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li>无论单引号或是双引号必须成对使用</li><li>单引号&#x2F;双引号可以互相嵌套， 但是不以自已嵌套自已（ 口诀： 外双内单， 或者外单内双）</li><li>必要时可以使用转义符 \， 输出单引号或双引号</li></ol><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><p>场景： + 运算符 可以实现字符串的拼接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 字符串拼接</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(1 + 1)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(&#x27;guanqi&#x27; + &#x27;老师&#x27;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> age = <span class="number">25</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// document.write(&#x27;我今年&#x27; + 19)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// document.write(&#x27;我今年&#x27; + age)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// document.write(&#x27;我今年&#x27; + age + &#x27;岁了&#x27;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;我今年&#x27;</span> + age + <span class="string">&#x27;岁了&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><p>使用场景<br>Ø 拼接字符串和变量<br>Ø 在没有它之前， 要拼接变量比较麻烦<br>语法<br>Ø &#96;&#96; (反引号)<br>Ø 在英文输入模式下按键盘的tab键上方那个键（ 1左边那个键）<br>Ø 内容拼接变量时， 用 ${ } 包住变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// let age = 20</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// // 模板字符串 外面用`` 里面 $&#123;变量名&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// document.write(`我今年$&#123;age&#125;岁了`)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> uname = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的姓名:&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> age = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的年龄:&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 输出</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`大家好，我叫<span class="subst">$&#123;uname&#125;</span>， 我今年贵庚<span class="subst">$&#123;age&#125;</span>岁了`</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="数据类型-–-布尔类型（boolean）"><a href="#数据类型-–-布尔类型（boolean）" class="headerlink" title="数据类型 – 布尔类型（boolean）"></a>数据类型 – 布尔类型（boolean）</h3><p>表示肯定或否定时在计算机中对应的是布尔类型数据。<br>它有两个固定的值 true 和 false， 表示肯定的数据用 true（ 真） ， 表示否定的数据用 false（ 假） 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// true  false 是布尔型字面量  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(3 &gt; 4)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// let isCool = false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(isCool)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="数据类型-–-未定义类型（undefined）"><a href="#数据类型-–-未定义类型（undefined）" class="headerlink" title="数据类型 – 未定义类型（undefined）"></a>数据类型 – 未定义类型（undefined）</h3><p>未定义是比较特殊的类型， 只有一个值 undefined。<br>什么情况出现未定义类型？<br>只声明变量， 不赋值的情况下， 变量的默认值为 undefined， 一般很少【 直接】 为某个变量赋值为 undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 未定义类型   弱数据类型   声明一个变量未赋值就是 undefined</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// let num</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(num)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>工作中的使用场景：<br>我们开发中经常声明一个变量， 等待传送过来的数据。<br>如果我们不知道这个数据是否传递过来， 此时我们可以通过检测这个变量是不是undefined， 就判断用户是否有数据传递过来</p><h3 id="数据类型-–-null（空类型）"><a href="#数据类型-–-null（空类型）" class="headerlink" title="数据类型 – null（空类型）"></a>数据类型 – null（空类型）</h3><p>JavaScript 中的 null 仅仅是一个代表“ 无” 、 “ 空” 或“ 值未知” 的特殊值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// null 空的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// let obj = null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(obj)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>null 和 undefined 区别：<br>l undefined 表示没有赋值<br>l null 表示赋值了， 但是内容为空</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 计算有区别</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> + <span class="number">1</span>)  <span class="comment">// NaN</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> + <span class="number">1</span>) <span class="comment">// 1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>null 开发中的使用场景：<br>官方解释： 把 null 作为尚未创建的对象<br>大白话： 将来有个变量里面存放的是一个对象， 但是对象还没创建好， 可以先给个null</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础第三天</title>
      <link href="/2024/07/22/JavaScript3.html"/>
      <url>/2024/07/22/JavaScript3.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript常量"><a href="#JavaScript常量" class="headerlink" title="JavaScript常量"></a>JavaScript常量</h1><h2 id="常量的基本使用"><a href="#常量的基本使用" class="headerlink" title="常量的基本使用"></a>常量的基本使用</h2><p>概念： 使用 const 声明的变量称为“ 常量” 。<br>使用场景： 当某个变量永远不会改变的时候， 就可以使用 const 来声明， 而不是let。<br>命名规范： 和变量一致<br>常量使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1.常量 不允许更改值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// const PI = 3.14</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(PI)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// PI = 3.15</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(PI)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2. 常量声明的时候必须赋值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// const PI </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>注意： 常量不允许重新赋值,声明的时候必须赋值（ 初始化）<br>小技巧： 不需要重新赋值的数据使用const</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>let — 现在实际开发变量声明方式。<br>var — 以前的声明变量的方式，会有很多问题。<br>const — 类似于 let ，但是变量的值无法被修改。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础第二天</title>
      <link href="/2024/07/15/JavaScript2.html"/>
      <url>/2024/07/15/JavaScript2.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript变量"><a href="#JavaScript变量" class="headerlink" title="JavaScript变量"></a>JavaScript变量</h1><h2 id="变量是什么？"><a href="#变量是什么？" class="headerlink" title="变量是什么？"></a>变量是什么？</h2><p>变量是计算机存储数据的“ 容器”<br>用户输入的数据我们通过变量存储起来<br>白话： 变量就是一个装东西的盒子。<br>通俗： 变量是计算机中用来存储数据的“ 容器” ， 它可以让计算机变得有记忆。<br>注意： 变量不是数据本身， 它们仅仅是一个用于存储数值的容器。 可以理解为是一个个用来装东西的纸箱子。</p><h2 id="变量的基本使用"><a href="#变量的基本使用" class="headerlink" title="变量的基本使用"></a>变量的基本使用</h2><h3 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h3><p>要想使用变量， 首先需要创建变量（ 也称为声明变量或者定义变量）<br>使用let关键字<br>语法：let 变量名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 声明一个年龄变量</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> age    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h3><p>定义了一个变量后， 你就能够初始化它（ 赋值） 。 在变量名之后跟上一个“ &#x3D;” ， 然后是数值。<br>简单点， 也可以声明变量的时候直接完成赋值操作,这种操作也称为 变量初始化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 赋值   =  赋值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//let age</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// age = 18</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 声明的同时直接赋值  变量的初始化</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// let age = 18</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 小案例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> num = <span class="number">20</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> uname = <span class="string">&#x27;pink老师&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(uname)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="更新变量"><a href="#更新变量" class="headerlink" title="更新变量"></a>更新变量</h3><p>变量赋值后， 还可以通过简单地给它一个不同的值来更新它。<br>注意： let 不允许多次声明一个变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 声明的同时直接赋值  变量的初始化</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> age = <span class="number">18</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    age = <span class="number">19</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> age = <span class="number">19</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="声明多个变量"><a href="#声明多个变量" class="headerlink" title="声明多个变量"></a>声明多个变量</h3><p>变量赋值后， 还可以通过简单地给它一个不同的值来更新它。<br>语法： 多个变量中间用逗号隔开。<br>说明： 看上去代码长度更短， 但并不推荐这样。 为了更好的可读性， 请一行只声明一个变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 声明多个变量    </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// let age = 18, uname = &#x27;迪丽热巴&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(age, uname)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 提倡声明的方式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> age = <span class="number">19</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> uname = <span class="string">&#x27;迪丽热巴&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age, uname)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="变量的本质"><a href="#变量的本质" class="headerlink" title="变量的本质"></a>变量的本质</h2><p>内存： 计算机中存储数据的地方， 相当于一个空间<br>变量本质： 是程序在内存中申请的一块用来存放数据的小空间</p><h2 id="变量命名规则与规范"><a href="#变量命名规则与规范" class="headerlink" title="变量命名规则与规范"></a>变量命名规则与规范</h2><p>规则： 必须遵守， 不遵守报错 (法律层面)<br>规范： 建议， 不遵守不会报错， 但不符合业内通识 （ 道德层面）</p><h3 id="规则："><a href="#规则：" class="headerlink" title="规则："></a>规则：</h3><p>不能用关键字<br>关键字： 有特殊含义的字符， JavaScript 内置的一些英语词汇。 例如： let、 var、 if、 for等<br>只能用下划线、 字母、 数字、 $组成， 且数字不能开头<br>字母严格区分大小写， 如 Age 和 age 是不同的变量</p><h3 id="规范："><a href="#规范：" class="headerlink" title="规范："></a>规范：</h3><p>起名要有意义<br>遵守小驼峰命名法–第一个单词首字母小写， 后面每个单词首字母大写。 例： userName</p><h2 id="变量拓展-let和var的区别"><a href="#变量拓展-let和var的区别" class="headerlink" title="变量拓展-let和var的区别"></a>变量拓展-let和var的区别</h2><p>先说结论 :var就是个bug，别迷恋它了，以后声明变量我们统一使用 let</p><h3 id="let-和-var-区别："><a href="#let-和-var-区别：" class="headerlink" title="let 和 var 区别："></a>let 和 var 区别：</h3><p>在较旧的JavaScript， 使用关键字 var 来声明变量 ， 而不是 let。<br>var 现在开发中一般不再使用它， 只是我们可能再老版程序中看到它。<br>let 为了解决 var 的一些问题。</p><h3 id="var-声明"><a href="#var-声明" class="headerlink" title="var 声明:"></a>var 声明:</h3><p>1.可以先使用 在声明 (不合理)<br>2.var 声明过的变量可以重复声明(不合理)<br>3.比如变量提升、 全局变量、 没有块级作用域等等</p><h2 id="变量拓展-数组"><a href="#变量拓展-数组" class="headerlink" title="变量拓展-数组"></a>变量拓展-数组</h2><p>数组 (Array) —— 一种将 一组数据存储在单个变量名下 的优雅方式</p><h3 id="数组的基本使用"><a href="#数组的基本使用" class="headerlink" title="数组的基本使用"></a>数组的基本使用</h3><p>目标： 能够声明数组并且能够获取里面的数据</p><h4 id="声明语法"><a href="#声明语法" class="headerlink" title="声明语法"></a>声明语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// let arr = [10, 20, 30]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 声明数组 有序 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> arr = [<span class="string">&#x27;刘德华&#x27;</span>, <span class="string">&#x27;张学友&#x27;</span>, <span class="string">&#x27;黎明&#x27;</span>, <span class="string">&#x27;郭富城&#x27;</span>, <span class="string">&#x27;pink老师&#x27;</span>, <span class="number">10</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>数组是按顺序保存，所以每个数据都有自己的编号<br>计算机中的编号从0开始<br>在数组中，数据的编号也叫索引或下标<br>数组可以存储任意类型的数据</p><h4 id="取值语法"><a href="#取值语法" class="headerlink" title="取值语法"></a>取值语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 使用数组  数组名[索引号] 从0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(arr)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]) <span class="comment">// 刘德华</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 数组长度 =  索引号 + 1 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>)  <span class="comment">// 6</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>通过下标取数据<br>取出来是什么类型的，就根据这种类型特点来访问</p><h3 id="一些术语"><a href="#一些术语" class="headerlink" title="一些术语"></a>一些术语</h3><p>元素：数组中保存的每个数据都叫数组元素<br>下标：数组中数据的编号<br>长度：数组中数据的个数，通过数组的length属性获得</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础第一天</title>
      <link href="/2024/05/15/JavaScript1.html"/>
      <url>/2024/05/15/JavaScript1.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/JavaScript">JavaScript</a>是一种脚本语言，可以用来创建动态更新的内容，控制多媒体，制作图像动画，还有很多。（好吧，虽然它不是万能的，但可以通过简短的代码来实现神奇的功能。）</p><h1 id="JavaScript-介绍"><a href="#JavaScript-介绍" class="headerlink" title="JavaScript 介绍"></a>JavaScript 介绍</h1><h2 id="JavaScript-是什么"><a href="#JavaScript-是什么" class="headerlink" title="JavaScript 是什么"></a>JavaScript 是什么</h2><h3 id="JavaScript-（是什么？）"><a href="#JavaScript-（是什么？）" class="headerlink" title="JavaScript （是什么？）"></a>JavaScript （是什么？）</h3><p>是一种运行在客户端（浏览器）的编程语言，实现人机交互效果。</p><h3 id="作用（做什么？）"><a href="#作用（做什么？）" class="headerlink" title="作用（做什么？）"></a>作用（做什么？）</h3><p>– 网页特效 (监听用户的一些行为让网页作出对应的反馈)<br>– 表单验证 (针对表单数据的合法性进行判断)<br>– 数据交互 (获取后台的数据, 渲染到前端)<br>– 服务端编程 (node.js)</p><h3 id="JavaScript的组成（-有什么？-）"><a href="#JavaScript的组成（-有什么？-）" class="headerlink" title="JavaScript的组成（ 有什么？ ）"></a>JavaScript的组成（ 有什么？ ）</h3><h4 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript:"></a>ECMAScript:</h4><p>规定了js基础语法核心知识。<br>比如： 变量、 分支语句、 循环语句、 对象等等</p><h4 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs :"></a>Web APIs :</h4><p>DOM 操作文档， 比如对页面元素进行移动、 大小、 添加删除等操作<br>BOM 操作浏览器， 比如页面弹窗， 检测窗口宽度、 存储数据到浏览器等等</p><h2 id="JavaScript-书写位置"><a href="#JavaScript-书写位置" class="headerlink" title="JavaScript 书写位置"></a>JavaScript 书写位置</h2><h3 id="内部-JavaScript"><a href="#内部-JavaScript" class="headerlink" title="内部 JavaScript"></a>内部 JavaScript</h3><p>直接写在html文件里，用script标签包住<br>规范：script标签写在上面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;!-- 内部js --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 页面弹出警示框</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">alert</span>(<span class="string">&#x27;你好，js~&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="外部-JavaScript"><a href="#外部-JavaScript" class="headerlink" title="外部 JavaScript"></a>外部 JavaScript</h3><p>代码写在以.js结尾的文件里<br>语法：通过script标签，引入到html页面中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/my.js&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 中间不要写内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="内联-JavaScript"><a href="#内联-JavaScript" class="headerlink" title="内联 JavaScript"></a>内联 JavaScript</h3><p>代码写在标签内部(vue框架)</p><h2 id="JavaScript-注释"><a href="#JavaScript-注释" class="headerlink" title="JavaScript 注释"></a>JavaScript 注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>符号： &#x2F;&#x2F;<br>作用： &#x2F;&#x2F;右边这一行的代码会被忽略<br>快捷键： ctrl + &#x2F;</p><h3 id="块注释"><a href="#块注释" class="headerlink" title="块注释"></a>块注释</h3><p>符号： &#x2F;* <em>&#x2F;<br>作用： 在&#x2F;</em> 和 *&#x2F; 之间的所有内容都会被忽略<br>快捷键： shift + alt + A</p><h2 id="JavaScript-结束符"><a href="#JavaScript-结束符" class="headerlink" title="JavaScript 结束符"></a>JavaScript 结束符</h2><p>结束符<br>作用： 使用英文的 ; 代表语句结束<br>实际情况： 实际开发中， 可写可不写, 浏览器(JavaScript 引擎) 可以自动推断语句的结束位置<br>现状： 在实际开发中， 越来越多的人主张， 书写 JavaScript 代码时省略结束符<br>约定： 为了风格统一， 结束符要么每句都写， 要么每句都不写（ 按照团队要求.）</p><h2 id="JavaScript-输入输出语法"><a href="#JavaScript-输入输出语法" class="headerlink" title="JavaScript 输入输出语法"></a>JavaScript 输入输出语法</h2><h3 id="输出语法"><a href="#输出语法" class="headerlink" title="输出语法"></a>输出语法</h3><h4 id="输出语法1"><a href="#输出语法1" class="headerlink" title="输出语法1"></a>输出语法1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 文档输出内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;我是div标签&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;h1&gt;我是标题&lt;/h1&gt;&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>作用： 向body内输出内容<br>注意： 如果输出的内容写的是标签， 也会被解析成网页元素</p><h4 id="输出语法2"><a href="#输出语法2" class="headerlink" title="输出语法2"></a>输出语法2</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//页面弹出内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">alert</span>(<span class="string">&#x27;要弹出的内容&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>作用： 页面弹出警告对话框</p><h4 id="输出语法3"><a href="#输出语法3" class="headerlink" title="输出语法3"></a>输出语法3</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 控制台打印输出 给 程序员</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;看看对不对&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;日志&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>作用： 控制台输出语法， 程序员调试使用</p><h3 id="输入语法"><a href="#输入语法" class="headerlink" title="输入语法"></a>输入语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 输入语句</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的年龄：&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>作用： 显示一个对话框， 对话框中包含一条文字信息， 用来提示用户输入文字</p><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p>在计算机科学中， 字面量（ literal） 是在计算机中描述 事&#x2F;物<br>比如：<br>我们工资是： 1000 此时 1000 就是 数字字面量<br>‘JavaScript’ 字符串字面量<br>还有接下来我们学的 [] 数组字面量 {} 对象字面量 等等</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
